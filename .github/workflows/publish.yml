name: Publish to PyPI

on:
  # Trigger on release creation
  release:
    types: [published]
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      test_pypi:
        description: 'Publish to Test PyPI'
        required: false
        default: false
        type: boolean
      production_pypi:
        description: 'Publish to Production PyPI'
        required: false
        default: false
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
    
    - name: Install dependencies
      run: |
        uv sync --all-extras --dev
    
    - name: Run linting
      run: |
        uv run ruff check src/ --exclude notebook/
        uv run ruff format --check src/ --exclude notebook/
      continue-on-error: true
    
    - name: Run type checking
      run: |
        uv run mypy src/ --exclude notebook/
      continue-on-error: true
    
    - name: Run tests
      run: |
        uv run pytest tests/ -v --cov=src --cov-report=xml --ignore=notebook/
      continue-on-error: true
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for proper versioning
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
    
    - name: Install build dependencies
      run: |
        uv tool install build
        uv tool install twine
    
    - name: Build package
      run: |
        uvx build
    
    - name: Check package
      run: |
        uvx twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish-test-pypi:
    needs: build
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && github.event.inputs.test_pypi == 'true' ||
      (github.event_name == 'release' && github.event.release.prerelease)
    environment:
      name: test-pypi
      url: https://test.pypi.org/p/ambitus-cli
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        verbose: true

  publish-pypi:
    needs: build
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && github.event.inputs.production_pypi == 'true' ||
      (github.event_name == 'release' && !github.event.release.prerelease)
    environment:
      name: pypi
      url: https://pypi.org/p/ambitus-cli
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true

  create-github-release:
    needs: [publish-pypi]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.production_pypi == 'true'
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version from pyproject.toml
      id: get_version
      run: |
        version=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "version=$version" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        release_name: Release v${{ steps.get_version.outputs.version }}
        body: |
          ## Changes
          
          * Published to PyPI
          * Version: ${{ steps.get_version.outputs.version }}
          
          ## Installation
          
          ```bash
          pip install ambitus-cli==${{ steps.get_version.outputs.version }}
          ```
        draft: false
        prerelease: false
